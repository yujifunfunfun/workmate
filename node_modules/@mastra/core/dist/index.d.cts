import { a as Metric } from './types-BtMyV38I.cjs';
export { E as EvaluationResult, M as MetricResult, T as TestInfo } from './types-BtMyV38I.cjs';
import { i as ToolAction, j as Agent$1, k as AgentConfig, e as MastraStorage$1, l as MastraMemory$1, m as ToolExecutionContext, n as Tool$1, o as Step, p as Workflow$1, q as WorkflowOptions } from './base-oP3DoUrm.cjs';
export { ae as ActionContext, ad as BaseCondition, B as BaseStructuredOutputType, Z as Config, v as CoreAssistantMessage, t as CoreMessage, u as CoreSystemMessage, a5 as CoreTool, x as CoreToolMessage, w as CoreUserMessage, P as DefaultLLMStreamObjectOptions, N as DefaultLLMStreamOptions, K as DefaultLLMTextObjectOptions, J as DefaultLLMTextOptions, as as DependencyCheckOutput, z as EmbedManyResult, y as EmbedResult, E as EvalRow, az as ExtractSchemaFromStep, aC as ExtractSchemaType, aA as ExtractStepResult, H as GenerateReturn, X as LLMInnerStreamOptions, Y as LLMStreamObjectOptions, U as LLMStreamOptions, R as LLMTextObjectOptions, Q as LLMTextOptions, L as LanguageModel, a as Mastra, $ as MemoryConfig, a2 as MemoryProcessor, a1 as MemoryProcessorOpts, _ as MessageResponse, g as MessageType, O as OutputType, aD as PathsToStringProps, ap as ResolverFunctionInput, aq as ResolverFunctionOutput, ab as RetryConfig, a0 as SharedMemoryConfig, a7 as StepAction, ah as StepCondition, ai as StepConfig, ag as StepDef, a6 as StepExecutionContext, aa as StepGraph, ay as StepId, aB as StepInputType, a9 as StepNode, at as StepResolverOutput, aj as StepResult, a8 as StepVariableType, ak as StepsRecord, S as StorageColumn, h as StorageGetMessagesArg, f as StorageThreadType, I as StreamReturn, G as StructuredOutput, F as StructuredOutputArrayItem, D as StructuredOutputType, ar as SubscriberFunctionOutput, ac as VariableReference, a4 as VercelTool, af as WhenConditionReturnValue, av as WorkflowActionParams, aw as WorkflowActions, au as WorkflowActors, am as WorkflowContext, ao as WorkflowEvent, an as WorkflowLogMessage, aE as WorkflowResumeResult, r as WorkflowRow, al as WorkflowRunResult, W as WorkflowRunState, s as WorkflowRuns, ax as WorkflowState, aF as createStep, a3 as createTool } from './base-oP3DoUrm.cjs';
import { M as MastraBase$1 } from './base-BihKcqDY.cjs';
export { O as OtelConfig, S as SamplingStrategy, T as Telemetry } from './base-BihKcqDY.cjs';
import { R as RegisteredLogger, a as LogLevel, T as TransportMap, L as Logger } from './index-CquI0inB.cjs';
export { B as BaseLogMessage, b as LoggerTransport, M as MultiLogger, c as combineLoggers, n as noopLogger } from './index-CquI0inB.cjs';
import { MastraDeployer as MastraDeployer$1 } from './deployer/index.cjs';
export { evaluate } from './eval/index.cjs';
import { Integration as Integration$1, OpenAPIToolset as OpenAPIToolset$1 } from './integration/index.cjs';
export { CohereRelevanceScorer, MastraAgentRelevanceScorer, RelevanceScoreProvider, createSimilarityPrompt } from './relevance/index.cjs';
export { InstrumentClass, OTLPStorageExporter, hasActiveTelemetry, withSpan } from './telemetry/index.cjs';
import { z } from 'zod';
import { MastraTTS as MastraTTS$1, TTSConfig } from './tts/index.cjs';
export { TagMaskOptions, checkEvalStorageFields, createMastraProxy, deepMerge, delay, ensureAllMessagesAreCoreMessages, ensureToolProperties, isVercelTool, isZodType, jsonSchemaPropertiesToTSTypes, jsonSchemaToModel, makeCoreTool, maskStreamTags, resolveSerializedZodOutput } from './utils.cjs';
import { MastraVector as MastraVector$1 } from './vector/index.cjs';
export { CreateIndexArgs, CreateIndexParams, IndexStats, ParamsToArgs, QueryResult, QueryVectorArgs, QueryVectorParams, UpsertVectorArgs, UpsertVectorParams } from './vector/index.cjs';
export { agentToStep, getActivePathsAndStatus, getResultActivePaths, getStepResult, getSuspendedPaths, isAgent, isConditionalKey, isErrorEvent, isFinalState, isLimboState, isTransitionEvent, isVariableReference, isWorkflow, mergeChildValue, recursivelyCheckForFinalState, resolveVariables, updateStepInHierarchy, workflowToStep } from './workflows/index.cjs';
export { AvailableHooks, executeHook, registerHook } from './hooks/index.cjs';
export { Message as AiMessageType } from 'ai';
import 'sift';
import 'json-schema';
import './di/index.cjs';
import '@opentelemetry/api';
import 'xstate';
import 'node:events';
import 'hono';
import 'hono/cors';
import 'hono-openapi';
import '@opentelemetry/sdk-trace-base';
import 'stream';
import 'pino';
import './bundler/index.cjs';
import '@opentelemetry/core';
import './vector/filter/index.cjs';

declare class Agent<TAgentId extends string = string, TTools extends Record<string, ToolAction<any, any, any>> = Record<string, ToolAction<any, any, any>>, TMetrics extends Record<string, Metric> = Record<string, Metric>> extends Agent$1<TAgentId, TTools, TMetrics> {
    constructor(config: AgentConfig<TAgentId, TTools, TMetrics>);
}

declare class MastraBase extends MastraBase$1 {
    constructor(args: {
        component?: RegisteredLogger;
        name?: string;
    });
}

declare abstract class MastraDeployer extends MastraDeployer$1 {
    constructor(args: {
        name: string;
        mastraDir: string;
        outputDirectory: string;
    });
}

declare abstract class MastraStorage extends MastraStorage$1 {
    constructor({ name }: {
        name: string;
    });
}

declare class Integration<ToolsParams = void, ApiClient = void> extends Integration$1<ToolsParams, ApiClient> {
    constructor();
}

declare abstract class OpenAPIToolset extends OpenAPIToolset$1 {
    constructor();
}

declare function createLogger(options: {
    name?: string;
    level?: LogLevel;
    transports?: TransportMap;
}): Logger;

declare abstract class MastraMemory extends MastraMemory$1 {
    constructor(_arg?: any);
}

declare class Tool<TSchemaIn extends z.ZodSchema | undefined = undefined, TSchemaOut extends z.ZodSchema | undefined = undefined, TContext extends ToolExecutionContext<TSchemaIn> = ToolExecutionContext<TSchemaIn>> extends Tool$1<TSchemaIn, TSchemaOut, TContext> {
    constructor(opts: ToolAction<TSchemaIn, TSchemaOut, TContext>);
}

declare abstract class MastraTTS extends MastraTTS$1 {
    constructor(args: TTSConfig);
}

declare abstract class MastraVector extends MastraVector$1 {
    constructor();
}

declare class Workflow<TSteps extends Step<any, any, any>[] = any, TTriggerSchema extends z.ZodObject<any> = any> extends Workflow$1<TSteps, string, TTriggerSchema> {
    constructor(args: WorkflowOptions<string, TSteps, TTriggerSchema>);
}

export { Agent, Integration, LogLevel, Logger, MastraBase, MastraDeployer, MastraMemory, MastraStorage, MastraTTS, MastraVector, Metric, OpenAPIToolset, RegisteredLogger, Step, TTSConfig, Tool, ToolAction, ToolExecutionContext, TransportMap, Workflow, WorkflowOptions, createLogger };
