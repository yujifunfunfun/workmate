import { Handler, MiddlewareHandler } from 'hono';
import { DescribeRouteOptions } from 'hono-openapi';
import { M as Methods, a as Mastra, A as ApiRoute } from '../base-oP3DoUrm.cjs';
import 'ai';
import '../base-BihKcqDY.cjs';
import '@opentelemetry/api';
import '../index-CquI0inB.cjs';
import 'stream';
import 'pino';
import '@opentelemetry/sdk-trace-base';
import '../types-BtMyV38I.cjs';
import 'sift';
import 'zod';
import 'json-schema';
import '../di/index.cjs';
import 'xstate';
import 'node:events';
import '../vector/index.cjs';
import '../vector/filter/index.cjs';
import '../tts/index.cjs';
import '../deployer/index.cjs';
import '../bundler/index.cjs';
import 'hono/cors';

type ParamsFromPath<P extends string> = {
    [K in P extends `${string}:${infer Param}/${string}` | `${string}:${infer Param}` ? Param : never]: string;
};
declare function registerApiRoute<P extends string>(path: P, options: P extends `/api/${string}` ? never : {
    method: Methods;
    openapi?: DescribeRouteOptions;
    handler: Handler<{
        Variables: {
            mastra: Mastra;
        };
    }, P, ParamsFromPath<P>>;
    middleware?: MiddlewareHandler | MiddlewareHandler[];
}): P extends `/api/${string}` ? never : ApiRoute;

export { registerApiRoute };
