{"version":3,"file":"GcpDetector.js","sourceRoot":"","sources":["../../../src/detectors/GcpDetector.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as gcpMetadata from 'gcp-metadata';\nimport { context, diag } from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\nimport {\n  DetectorSync,\n  ResourceDetectionConfig,\n  Resource,\n  ResourceAttributes,\n  IResource,\n} from '@opentelemetry/resources';\nimport {\n  CLOUDPROVIDERVALUES_GCP,\n  SEMRESATTRS_CLOUD_ACCOUNT_ID,\n  SEMRESATTRS_CLOUD_AVAILABILITY_ZONE,\n  SEMRESATTRS_CLOUD_PROVIDER,\n  SEMRESATTRS_CONTAINER_NAME,\n  SEMRESATTRS_HOST_ID,\n  SEMRESATTRS_HOST_NAME,\n  SEMRESATTRS_K8S_CLUSTER_NAME,\n  SEMRESATTRS_K8S_NAMESPACE_NAME,\n  SEMRESATTRS_K8S_POD_NAME,\n} from '@opentelemetry/semantic-conventions';\n\n/**\n * The GcpDetector can be used to detect if a process is running in the Google\n * Cloud Platform and return a {@link Resource} populated with metadata about\n * the instance. Returns an empty Resource if detection fails.\n */\nclass GcpDetector implements DetectorSync {\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const attributes = context.with(suppressTracing(context.active()), () =>\n      this._getAttributes()\n    );\n    return new Resource({}, attributes);\n  }\n\n  /**\n   * Attempts to connect and obtain instance configuration data from the GCP metadata service.\n   * If the connection is successful it returns a promise containing a {@link ResourceAttributes}\n   * object with instance metadata. Returns a promise containing an\n   * empty {@link ResourceAttributes} if the connection or parsing of the metadata fails.\n   */\n  private async _getAttributes(): Promise<ResourceAttributes> {\n    if (!(await gcpMetadata.isAvailable())) {\n      diag.debug('GcpDetector failed: GCP Metadata unavailable.');\n      return {};\n    }\n\n    const [projectId, instanceId, zoneId, clusterName, hostname] =\n      await Promise.all([\n        this._getProjectId(),\n        this._getInstanceId(),\n        this._getZone(),\n        this._getClusterName(),\n        this._getHostname(),\n      ]);\n\n    const attributes: ResourceAttributes = {};\n    attributes[SEMRESATTRS_CLOUD_ACCOUNT_ID] = projectId;\n    attributes[SEMRESATTRS_HOST_ID] = instanceId;\n    attributes[SEMRESATTRS_HOST_NAME] = hostname;\n    attributes[SEMRESATTRS_CLOUD_AVAILABILITY_ZONE] = zoneId;\n    attributes[SEMRESATTRS_CLOUD_PROVIDER] = CLOUDPROVIDERVALUES_GCP;\n\n    if (process.env.KUBERNETES_SERVICE_HOST)\n      this._addK8sAttributes(attributes, clusterName);\n\n    return attributes;\n  }\n\n  /** Add resource attributes for K8s */\n  private _addK8sAttributes(\n    attributes: ResourceAttributes,\n    clusterName: string\n  ): void {\n    attributes[SEMRESATTRS_K8S_CLUSTER_NAME] = clusterName;\n    attributes[SEMRESATTRS_K8S_NAMESPACE_NAME] = process.env.NAMESPACE ?? '';\n    attributes[SEMRESATTRS_K8S_POD_NAME] = process.env.HOSTNAME ?? '';\n    attributes[SEMRESATTRS_CONTAINER_NAME] = process.env.CONTAINER_NAME ?? '';\n  }\n\n  /** Gets project id from GCP project metadata. */\n  private async _getProjectId(): Promise<string> {\n    try {\n      return await gcpMetadata.project('project-id');\n    } catch {\n      return '';\n    }\n  }\n\n  /** Gets instance id from GCP instance metadata. */\n  private async _getInstanceId(): Promise<string> {\n    try {\n      const id = await gcpMetadata.instance('id');\n      return id.toString();\n    } catch {\n      return '';\n    }\n  }\n\n  /** Gets zone from GCP instance metadata. */\n  private async _getZone(): Promise<string> {\n    try {\n      const zoneId = await gcpMetadata.instance('zone');\n      if (zoneId) {\n        return zoneId.split('/').pop();\n      }\n      return '';\n    } catch {\n      return '';\n    }\n  }\n\n  /** Gets cluster name from GCP instance metadata. */\n  private async _getClusterName(): Promise<string> {\n    try {\n      return await gcpMetadata.instance('attributes/cluster-name');\n    } catch {\n      return '';\n    }\n  }\n\n  /** Gets hostname from GCP instance metadata. */\n  private async _getHostname(): Promise<string> {\n    try {\n      return await gcpMetadata.instance('hostname');\n    } catch {\n      return '';\n    }\n  }\n}\n\nexport const gcpDetector = new GcpDetector();\n"]}