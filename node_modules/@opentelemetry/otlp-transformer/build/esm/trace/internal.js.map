{"version":3,"file":"internal.js","sourceRoot":"","sources":["../../../src/trace/internal.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport type { Link } from '@opentelemetry/api';\nimport { IResource } from '@opentelemetry/resources';\nimport type { ReadableSpan, TimedEvent } from '@opentelemetry/sdk-trace-base';\nimport type { Encoder } from '../common/utils';\nimport {\n  createInstrumentationScope,\n  createResource,\n  toAttributes,\n} from '../common/internal';\nimport {\n  EStatusCode,\n  IEvent,\n  IExportTraceServiceRequest,\n  ILink,\n  IResourceSpans,\n  IScopeSpans,\n  ISpan,\n} from './internal-types';\nimport { OtlpEncodingOptions } from '../common/internal-types';\nimport { getOtlpEncoder } from '../common/utils';\n\nexport function sdkSpanToOtlpSpan(span: ReadableSpan, encoder: Encoder): ISpan {\n  const ctx = span.spanContext();\n  const status = span.status;\n  return {\n    traceId: encoder.encodeSpanContext(ctx.traceId),\n    spanId: encoder.encodeSpanContext(ctx.spanId),\n    parentSpanId: encoder.encodeOptionalSpanContext(span.parentSpanId),\n    traceState: ctx.traceState?.serialize(),\n    name: span.name,\n    // Span kind is offset by 1 because the API does not define a value for unset\n    kind: span.kind == null ? 0 : span.kind + 1,\n    startTimeUnixNano: encoder.encodeHrTime(span.startTime),\n    endTimeUnixNano: encoder.encodeHrTime(span.endTime),\n    attributes: toAttributes(span.attributes),\n    droppedAttributesCount: span.droppedAttributesCount,\n    events: span.events.map(event => toOtlpSpanEvent(event, encoder)),\n    droppedEventsCount: span.droppedEventsCount,\n    status: {\n      // API and proto enums share the same values\n      code: status.code as unknown as EStatusCode,\n      message: status.message,\n    },\n    links: span.links.map(link => toOtlpLink(link, encoder)),\n    droppedLinksCount: span.droppedLinksCount,\n  };\n}\n\nexport function toOtlpLink(link: Link, encoder: Encoder): ILink {\n  return {\n    attributes: link.attributes ? toAttributes(link.attributes) : [],\n    spanId: encoder.encodeSpanContext(link.context.spanId),\n    traceId: encoder.encodeSpanContext(link.context.traceId),\n    traceState: link.context.traceState?.serialize(),\n    droppedAttributesCount: link.droppedAttributesCount || 0,\n  };\n}\n\nexport function toOtlpSpanEvent(\n  timedEvent: TimedEvent,\n  encoder: Encoder\n): IEvent {\n  return {\n    attributes: timedEvent.attributes\n      ? toAttributes(timedEvent.attributes)\n      : [],\n    name: timedEvent.name,\n    timeUnixNano: encoder.encodeHrTime(timedEvent.time),\n    droppedAttributesCount: timedEvent.droppedAttributesCount || 0,\n  };\n}\n\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function createExportTraceServiceRequest(\n  spans: ReadableSpan[],\n  options?: OtlpEncodingOptions\n): IExportTraceServiceRequest {\n  const encoder = getOtlpEncoder(options);\n  return {\n    resourceSpans: spanRecordsToResourceSpans(spans, encoder),\n  };\n}\n\nfunction createResourceMap(readableSpans: ReadableSpan[]) {\n  const resourceMap: Map<IResource, Map<string, ReadableSpan[]>> = new Map();\n  for (const record of readableSpans) {\n    let ilmMap = resourceMap.get(record.resource);\n\n    if (!ilmMap) {\n      ilmMap = new Map();\n      resourceMap.set(record.resource, ilmMap);\n    }\n\n    // TODO this is duplicated in basic tracer. Consolidate on a common helper in core\n    const instrumentationLibraryKey = `${record.instrumentationLibrary.name}@${\n      record.instrumentationLibrary.version || ''\n    }:${record.instrumentationLibrary.schemaUrl || ''}`;\n    let records = ilmMap.get(instrumentationLibraryKey);\n\n    if (!records) {\n      records = [];\n      ilmMap.set(instrumentationLibraryKey, records);\n    }\n\n    records.push(record);\n  }\n\n  return resourceMap;\n}\n\nfunction spanRecordsToResourceSpans(\n  readableSpans: ReadableSpan[],\n  encoder: Encoder\n): IResourceSpans[] {\n  const resourceMap = createResourceMap(readableSpans);\n  const out: IResourceSpans[] = [];\n\n  const entryIterator = resourceMap.entries();\n  let entry = entryIterator.next();\n  while (!entry.done) {\n    const [resource, ilmMap] = entry.value;\n    const scopeResourceSpans: IScopeSpans[] = [];\n    const ilmIterator = ilmMap.values();\n    let ilmEntry = ilmIterator.next();\n    while (!ilmEntry.done) {\n      const scopeSpans = ilmEntry.value;\n      if (scopeSpans.length > 0) {\n        const spans = scopeSpans.map(readableSpan =>\n          sdkSpanToOtlpSpan(readableSpan, encoder)\n        );\n\n        scopeResourceSpans.push({\n          scope: createInstrumentationScope(\n            scopeSpans[0].instrumentationLibrary\n          ),\n          spans: spans,\n          schemaUrl: scopeSpans[0].instrumentationLibrary.schemaUrl,\n        });\n      }\n      ilmEntry = ilmIterator.next();\n    }\n    // TODO SDK types don't provide resource schema URL at this time\n    const transformedSpans: IResourceSpans = {\n      resource: createResource(resource),\n      scopeSpans: scopeResourceSpans,\n      schemaUrl: undefined,\n    };\n\n    out.push(transformedSpans);\n    entry = entryIterator.next();\n  }\n\n  return out;\n}\n"]}