{"version":3,"file":"ContainerDetector.js","sourceRoot":"","sources":["../../../src/detectors/ContainerDetector.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  DetectorSync,\n  IResource,\n  Resource,\n  ResourceAttributes,\n  ResourceDetectionConfig,\n} from '@opentelemetry/resources';\n\nimport { SEMRESATTRS_CONTAINER_ID } from '@opentelemetry/semantic-conventions';\n\nimport * as fs from 'fs';\nimport * as util from 'util';\nimport { context, diag } from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\nimport { extractContainerIdFromLine } from './utils';\n\nexport class ContainerDetector implements DetectorSync {\n  readonly CONTAINER_ID_LENGTH = 64;\n  readonly DEFAULT_CGROUP_V1_PATH = '/proc/self/cgroup';\n  readonly DEFAULT_CGROUP_V2_PATH = '/proc/self/mountinfo';\n  readonly UTF8_UNICODE = 'utf8';\n  readonly HOSTNAME = 'hostname';\n  readonly MARKING_PREFIX = ['containers', 'overlay-containers'];\n  readonly CRIO = 'crio-';\n  readonly CRI_CONTAINERD = 'cri-containerd-';\n  readonly DOCKER = 'docker-';\n  readonly HEX_STRING_REGEX: RegExp = /^[a-f0-9]+$/i;\n\n  private static readFileAsync = util.promisify(fs.readFile);\n\n  detect(_config?: ResourceDetectionConfig): IResource {\n    const attributes = context.with(suppressTracing(context.active()), () =>\n      this._getAttributes()\n    );\n    return new Resource({}, attributes);\n  }\n\n  /**\n   * Attempts to obtain the container ID from the file system. If the\n   * file read is successful it returns a promise containing a {@link ResourceAttributes}\n   * object with the container ID. Returns a promise containing an\n   * empty {@link ResourceAttributes} if the paths do not exist or fail\n   * to read.\n   */\n  async _getAttributes(): Promise<ResourceAttributes> {\n    try {\n      const containerId = await this._getContainerId();\n      return !containerId\n        ? {}\n        : {\n            [SEMRESATTRS_CONTAINER_ID]: containerId,\n          };\n    } catch (e) {\n      diag.debug(\n        'Container Detector did not identify running inside a supported container, no container attributes will be added to resource: ',\n        e\n      );\n      return {};\n    }\n  }\n\n  private async _getContainerIdV1(): Promise<string | undefined> {\n    const rawData = await ContainerDetector.readFileAsync(\n      this.DEFAULT_CGROUP_V1_PATH,\n      this.UTF8_UNICODE\n    );\n    const splitData = rawData.trim().split('\\n');\n\n    for (const line of splitData) {\n      const containerID = extractContainerIdFromLine(line);\n      if (containerID) {\n        return containerID;\n      }\n    }\n    return undefined;\n  }\n\n  private async _getContainerIdV2() {\n    const rawData = await ContainerDetector.readFileAsync(\n      this.DEFAULT_CGROUP_V2_PATH,\n      this.UTF8_UNICODE\n    );\n    const str = rawData\n      .trim()\n      .split('\\n')\n      .find(s => s.includes(this.HOSTNAME));\n\n    if (!str) return '';\n\n    const strArray = str?.split('/') ?? [];\n    for (let i = 0; i < strArray.length - 1; i++) {\n      if (\n        this.MARKING_PREFIX.includes(strArray[i]) &&\n        strArray[i + 1]?.length === this.CONTAINER_ID_LENGTH\n      ) {\n        return strArray[i + 1];\n      }\n    }\n    return '';\n  }\n\n  /*\n    cgroupv1 path would still exist in case of container running on v2\n    but the cgroupv1 path would no longer have the container id and would\n    fallback on the cgroupv2 implementation.\n  */\n  private async _getContainerId(): Promise<string | undefined> {\n    try {\n      const containerIdV1 = await this._getContainerIdV1();\n      if (containerIdV1) {\n        return containerIdV1; // If containerIdV1 is a non-empty string, return it.\n      }\n      const containerIdV2 = await this._getContainerIdV2();\n      if (containerIdV2) {\n        return containerIdV2; // If containerIdV2 is a non-empty string, return it.\n      }\n    } catch (e) {\n      if (e instanceof Error) {\n        const errorMessage = e.message;\n        diag.debug(\n          'Container Detector failed to read the Container ID: ',\n          errorMessage\n        );\n      }\n    }\n    return undefined; // Explicitly return undefined if neither ID is found.\n  }\n}\n\nexport const containerDetector = new ContainerDetector();\n"]}