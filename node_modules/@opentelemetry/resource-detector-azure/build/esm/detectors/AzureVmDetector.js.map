{"version":3,"file":"AzureVmDetector.js","sourceRoot":"","sources":["../../../src/detectors/AzureVmDetector.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as http from 'http';\n\nimport { context } from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\nimport {\n  DetectorSync,\n  IResource,\n  Resource,\n  ResourceAttributes,\n} from '@opentelemetry/resources';\nimport {\n  CLOUDPLATFORMVALUES_AZURE_VM,\n  CLOUDPROVIDERVALUES_AZURE,\n  SEMRESATTRS_CLOUD_PLATFORM,\n  SEMRESATTRS_CLOUD_PROVIDER,\n  SEMRESATTRS_CLOUD_REGION,\n  SEMRESATTRS_HOST_ID,\n  SEMRESATTRS_HOST_NAME,\n  SEMRESATTRS_HOST_TYPE,\n  SEMRESATTRS_OS_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport {\n  CLOUD_RESOURCE_ID_RESOURCE_ATTRIBUTE,\n  AZURE_VM_METADATA_HOST,\n  AZURE_VM_METADATA_PATH,\n  AZURE_VM_SCALE_SET_NAME_ATTRIBUTE,\n  AZURE_VM_SKU_ATTRIBUTE,\n  AzureVmMetadata,\n} from '../types';\n\n/**\n * The AzureVmDetector can be used to detect if a process is running in an Azure VM.\n * @returns a {@link Resource} populated with data about the environment or an empty Resource if detection fails.\n */\nclass AzureVmResourceDetector implements DetectorSync {\n  detect(): IResource {\n    const attributes = context.with(suppressTracing(context.active()), () =>\n      this.getAzureVmMetadata()\n    );\n    return new Resource({}, attributes);\n  }\n\n  async getAzureVmMetadata(): Promise<ResourceAttributes> {\n    const options = {\n      host: AZURE_VM_METADATA_HOST,\n      path: AZURE_VM_METADATA_PATH,\n      method: 'GET',\n      timeout: 5000,\n      headers: {\n        Metadata: 'True',\n      },\n    };\n    const metadata: AzureVmMetadata = await new Promise((resolve, reject) => {\n      const timeoutId = setTimeout(() => {\n        req.destroy();\n        reject(new Error('Azure metadata service request timed out.'));\n      }, 1000);\n\n      const req = http.request(options, res => {\n        clearTimeout(timeoutId);\n        const { statusCode } = res;\n        res.setEncoding('utf8');\n        let rawData = '';\n        res.on('data', chunk => (rawData += chunk));\n        res.on('end', () => {\n          if (statusCode && statusCode >= 200 && statusCode < 300) {\n            try {\n              resolve(JSON.parse(rawData));\n            } catch (error) {\n              reject(error);\n            }\n          } else {\n            reject(\n              new Error('Failed to load page, status code: ' + statusCode)\n            );\n          }\n        });\n      });\n      req.on('error', err => {\n        clearTimeout(timeoutId);\n        reject(err);\n      });\n      req.end();\n    });\n\n    const attributes = {\n      [AZURE_VM_SCALE_SET_NAME_ATTRIBUTE]: metadata['vmScaleSetName'],\n      [AZURE_VM_SKU_ATTRIBUTE]: metadata['sku'],\n      [SEMRESATTRS_CLOUD_PLATFORM]: CLOUDPLATFORMVALUES_AZURE_VM,\n      [SEMRESATTRS_CLOUD_PROVIDER]: CLOUDPROVIDERVALUES_AZURE,\n      [SEMRESATTRS_CLOUD_REGION]: metadata['location'],\n      [CLOUD_RESOURCE_ID_RESOURCE_ATTRIBUTE]: metadata['resourceId'],\n      [SEMRESATTRS_HOST_ID]: metadata['vmId'],\n      [SEMRESATTRS_HOST_NAME]: metadata['name'],\n      [SEMRESATTRS_HOST_TYPE]: metadata['vmSize'],\n      [SEMRESATTRS_OS_VERSION]: metadata['version'],\n    };\n    return attributes;\n  }\n}\n\nexport const azureVmDetector = new AzureVmResourceDetector();\n"]}