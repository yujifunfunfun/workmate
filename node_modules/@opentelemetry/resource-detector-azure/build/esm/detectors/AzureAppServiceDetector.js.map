{"version":3,"file":"AzureAppServiceDetector.js","sourceRoot":"","sources":["../../../src/detectors/AzureAppServiceDetector.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;AAEH,OAAO,EAA2B,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AAC7E,OAAO,EACL,0CAA0C,EAC1C,WAAW,EACX,sBAAsB,EACtB,gBAAgB,EAChB,mBAAmB,EACnB,iBAAiB,EACjB,iBAAiB,EACjB,oCAAoC,GACrC,MAAM,UAAU,CAAC;AAClB,OAAO,EACL,wBAAwB,EACxB,kCAAkC,EAClC,mBAAmB,EACnB,+BAA+B,EAC/B,wBAAwB,EACxB,0BAA0B,EAC1B,0BAA0B,EAC1B,yBAAyB,EACzB,qCAAqC,GACtC,MAAM,qCAAqC,CAAC;AAC7C,OAAO,EAAE,mBAAmB,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAEhE,IAAM,8BAA8B;IAClC,GAAC,wBAAwB,IAAG,WAAW;IACvC,GAAC,kCAAkC,IAAG,iBAAiB;IACvD,GAAC,mBAAmB,IAAG,gBAAgB;IACvC,GAAC,+BAA+B,IAAG,mBAAmB;IACtD,GAAC,0CAA0C,IAAG,sBAAsB;OACrE,CAAC;AAEF;;;GAGG;AACH;IAAA;IAqCA,CAAC;IApCC,wCAAM,GAAN;;QACE,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAM,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QACvD,IAAI,eAAe,IAAI,CAAC,eAAe,EAAE,EAAE;YACzC,UAAU,yBACL,UAAU,gBACZ,wBAAwB,IAAG,eAAe,MAC5C,CAAC;YACF,UAAU,yBACL,UAAU,gBACZ,0BAA0B,IAAG,yBAAyB,MACxD,CAAC;YACF,UAAU,yBACL,UAAU,gBACZ,0BAA0B,IAAG,qCAAqC,MACpE,CAAC;YAEF,IAAM,gBAAgB,GAAG,mBAAmB,CAAC,eAAe,CAAC,CAAC;YAC9D,IAAI,gBAAgB,EAAE;gBACpB,UAAU,yBACL,UAAU,aACR,GAAC,oCAAoC,IAAG,gBAAgB,MAC9D,CAAC;aACH;YAED,KAA2B,UAE1B,EAF0B,KAAA,MAAM,CAAC,OAAO,CACvC,8BAA8B,CAC/B,EAF0B,cAE1B,EAF0B,IAE1B,EAAE;gBAFQ,IAAA,WAAY,EAAX,GAAG,QAAA,EAAE,KAAK,QAAA;gBAGpB,IAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAClC,IAAI,MAAM,EAAE;oBACV,UAAU,yBAAQ,UAAU,aAAO,GAAC,GAAG,IAAG,MAAM,MAAI,CAAC;iBACtD;aACF;SACF;QACD,OAAO,IAAI,QAAQ,CAAC,UAAU,CAAC,CAAC;IAClC,CAAC;IACH,8BAAC;AAAD,CAAC,AArCD,IAqCC;AAED,MAAM,CAAC,IAAM,uBAAuB,GAAG,IAAI,uBAAuB,EAAE,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DetectorSync, IResource, Resource } from '@opentelemetry/resources';\nimport {\n  AZURE_APP_SERVICE_STAMP_RESOURCE_ATTRIBUTE,\n  REGION_NAME,\n  WEBSITE_HOME_STAMPNAME,\n  WEBSITE_HOSTNAME,\n  WEBSITE_INSTANCE_ID,\n  WEBSITE_SITE_NAME,\n  WEBSITE_SLOT_NAME,\n  CLOUD_RESOURCE_ID_RESOURCE_ATTRIBUTE,\n} from '../types';\nimport {\n  SEMRESATTRS_CLOUD_REGION,\n  SEMRESATTRS_DEPLOYMENT_ENVIRONMENT,\n  SEMRESATTRS_HOST_ID,\n  SEMRESATTRS_SERVICE_INSTANCE_ID,\n  SEMRESATTRS_SERVICE_NAME,\n  SEMRESATTRS_CLOUD_PROVIDER,\n  SEMRESATTRS_CLOUD_PLATFORM,\n  CLOUDPROVIDERVALUES_AZURE,\n  CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n} from '@opentelemetry/semantic-conventions';\nimport { getAzureResourceUri, isAzureFunction } from '../utils';\n\nconst APP_SERVICE_ATTRIBUTE_ENV_VARS = {\n  [SEMRESATTRS_CLOUD_REGION]: REGION_NAME,\n  [SEMRESATTRS_DEPLOYMENT_ENVIRONMENT]: WEBSITE_SLOT_NAME,\n  [SEMRESATTRS_HOST_ID]: WEBSITE_HOSTNAME,\n  [SEMRESATTRS_SERVICE_INSTANCE_ID]: WEBSITE_INSTANCE_ID,\n  [AZURE_APP_SERVICE_STAMP_RESOURCE_ATTRIBUTE]: WEBSITE_HOME_STAMPNAME,\n};\n\n/**\n * The AzureAppServiceDetector can be used to detect if a process is running in an Azure App Service\n * @returns a {@link Resource} populated with data about the environment or an empty Resource if detection fails.\n */\nclass AzureAppServiceDetector implements DetectorSync {\n  detect(): IResource {\n    let attributes = {};\n    const websiteSiteName = process.env[WEBSITE_SITE_NAME];\n    if (websiteSiteName && !isAzureFunction()) {\n      attributes = {\n        ...attributes,\n        [SEMRESATTRS_SERVICE_NAME]: websiteSiteName,\n      };\n      attributes = {\n        ...attributes,\n        [SEMRESATTRS_CLOUD_PROVIDER]: CLOUDPROVIDERVALUES_AZURE,\n      };\n      attributes = {\n        ...attributes,\n        [SEMRESATTRS_CLOUD_PLATFORM]: CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n      };\n\n      const azureResourceUri = getAzureResourceUri(websiteSiteName);\n      if (azureResourceUri) {\n        attributes = {\n          ...attributes,\n          ...{ [CLOUD_RESOURCE_ID_RESOURCE_ATTRIBUTE]: azureResourceUri },\n        };\n      }\n\n      for (const [key, value] of Object.entries(\n        APP_SERVICE_ATTRIBUTE_ENV_VARS\n      )) {\n        const envVar = process.env[value];\n        if (envVar) {\n          attributes = { ...attributes, ...{ [key]: envVar } };\n        }\n      }\n    }\n    return new Resource(attributes);\n  }\n}\n\nexport const azureAppServiceDetector = new AzureAppServiceDetector();\n"]}