{"version":3,"file":"AzureFunctionsDetector.js","sourceRoot":"","sources":["../../../src/detectors/AzureFunctionsDetector.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;GAcG;;;;;;;;;;;;;AAEH,OAAO,EAA2B,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AAE7E,OAAO,EACL,2BAA2B,EAC3B,yBAAyB,EACzB,0BAA0B,EAC1B,0BAA0B,EAC1B,wBAAwB,EACxB,yBAAyB,EACzB,mCAAmC,EACnC,wBAAwB,EACxB,uBAAuB,GACxB,MAAM,qCAAqC,CAAC;AAC7C,OAAO,EACL,iBAAiB,EACjB,mBAAmB,EACnB,mBAAmB,EACnB,WAAW,EACX,oCAAoC,GACrC,MAAM,UAAU,CAAC;AAClB,OAAO,EAAE,mBAAmB,EAAE,eAAe,EAAE,MAAM,UAAU,CAAC;AAEhE,IAAM,kCAAkC;IACtC,GAAC,wBAAwB,IAAG,iBAAiB;IAC7C,GAAC,yBAAyB,IAAG,mBAAmB;IAChD,GAAC,2BAA2B,IAAG,mBAAmB;OACnD,CAAC;AAEF;;;GAGG;AACH;IAAA;IA0DA,CAAC;IAzDC,uCAAM,GAAN;;QACE,IAAI,UAAU,GAAG,EAAE,CAAC;QACpB,IAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;QAEnD;;;;WAIG;QACH,IAAI,WAAW,IAAI,eAAe,EAAE,EAAE;YACpC,IAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;YAC1D,IAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;YAE1D,UAAU;gBACR,GAAC,0BAA0B,IAAG,yBAAyB;gBACvD,GAAC,0BAA0B,IAAG,mCAAmC;gBACjE,GAAC,wBAAwB,IAAG,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;gBACpD,GAAC,uBAAuB,IAAG,OAAO,CAAC,GAAG;mBACvC,CAAC;YAEF,IAAI,WAAW,EAAE;gBACf,UAAU,yBACL,UAAU,gBACZ,wBAAwB,IAAG,WAAW,MACxC,CAAC;aACH;YACD,IAAI,gBAAgB,EAAE;gBACpB,UAAU,yBACL,UAAU,gBACZ,yBAAyB,IAAG,gBAAgB,MAC9C,CAAC;aACH;YACD,IAAI,gBAAgB,EAAE;gBACpB,UAAU,yBACL,UAAU,gBACZ,2BAA2B,IAAG,gBAAgB,MAChD,CAAC;aACH;YACD,IAAM,gBAAgB,GAAG,mBAAmB,CAAC,WAAW,CAAC,CAAC;YAC1D,IAAI,gBAAgB,EAAE;gBACpB,UAAU,yBACL,UAAU,aACR,GAAC,oCAAoC,IAAG,gBAAgB,MAC9D,CAAC;aACH;YAED,KAA2B,UAE1B,EAF0B,KAAA,MAAM,CAAC,OAAO,CACvC,kCAAkC,CACnC,EAF0B,cAE1B,EAF0B,IAE1B,EAAE;gBAFQ,IAAA,WAAY,EAAX,GAAG,QAAA,EAAE,KAAK,QAAA;gBAGpB,IAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAClC,IAAI,MAAM,EAAE;oBACV,UAAU,yBAAQ,UAAU,aAAO,GAAC,GAAG,IAAG,MAAM,MAAI,CAAC;iBACtD;aACF;SACF;QACD,OAAO,IAAI,QAAQ,CAAC,UAAU,CAAC,CAAC;IAClC,CAAC;IACH,6BAAC;AAAD,CAAC,AA1DD,IA0DC;AAED,MAAM,CAAC,IAAM,sBAAsB,GAAG,IAAI,sBAAsB,EAAE,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DetectorSync, IResource, Resource } from '@opentelemetry/resources';\n\nimport {\n  SEMRESATTRS_FAAS_MAX_MEMORY,\n  SEMRESATTRS_FAAS_INSTANCE,\n  SEMRESATTRS_CLOUD_PROVIDER,\n  SEMRESATTRS_CLOUD_PLATFORM,\n  SEMRESATTRS_CLOUD_REGION,\n  CLOUDPROVIDERVALUES_AZURE,\n  CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n  SEMRESATTRS_SERVICE_NAME,\n  SEMRESATTRS_PROCESS_PID,\n} from '@opentelemetry/semantic-conventions';\nimport {\n  WEBSITE_SITE_NAME,\n  WEBSITE_INSTANCE_ID,\n  FUNCTIONS_MEM_LIMIT,\n  REGION_NAME,\n  CLOUD_RESOURCE_ID_RESOURCE_ATTRIBUTE,\n} from '../types';\nimport { getAzureResourceUri, isAzureFunction } from '../utils';\n\nconst AZURE_FUNCTIONS_ATTRIBUTE_ENV_VARS = {\n  [SEMRESATTRS_SERVICE_NAME]: WEBSITE_SITE_NAME,\n  [SEMRESATTRS_FAAS_INSTANCE]: WEBSITE_INSTANCE_ID,\n  [SEMRESATTRS_FAAS_MAX_MEMORY]: FUNCTIONS_MEM_LIMIT,\n};\n\n/**\n * The AzureFunctionsDetector can be used to detect if a process is running in Azure Functions\n * @returns a {@link Resource} populated with data about the environment or an empty Resource if detection fails.\n */\nclass AzureFunctionsDetector implements DetectorSync {\n  detect(): IResource {\n    let attributes = {};\n    const serviceName = process.env[WEBSITE_SITE_NAME];\n\n    /**\n     * Checks that we are operating within an Azure Function using the function version since WEBSITE_SITE_NAME\n     * will exist in Azure App Service as well and detectors should be mutually exclusive.\n     * If the function version is not present, we check for the website sku to determine if it is a function.\n     */\n    if (serviceName && isAzureFunction()) {\n      const functionInstance = process.env[WEBSITE_INSTANCE_ID];\n      const functionMemLimit = process.env[FUNCTIONS_MEM_LIMIT];\n\n      attributes = {\n        [SEMRESATTRS_CLOUD_PROVIDER]: CLOUDPROVIDERVALUES_AZURE,\n        [SEMRESATTRS_CLOUD_PLATFORM]: CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n        [SEMRESATTRS_CLOUD_REGION]: process.env[REGION_NAME],\n        [SEMRESATTRS_PROCESS_PID]: process.pid,\n      };\n\n      if (serviceName) {\n        attributes = {\n          ...attributes,\n          [SEMRESATTRS_SERVICE_NAME]: serviceName,\n        };\n      }\n      if (functionInstance) {\n        attributes = {\n          ...attributes,\n          [SEMRESATTRS_FAAS_INSTANCE]: functionInstance,\n        };\n      }\n      if (functionMemLimit) {\n        attributes = {\n          ...attributes,\n          [SEMRESATTRS_FAAS_MAX_MEMORY]: functionMemLimit,\n        };\n      }\n      const azureResourceUri = getAzureResourceUri(serviceName);\n      if (azureResourceUri) {\n        attributes = {\n          ...attributes,\n          ...{ [CLOUD_RESOURCE_ID_RESOURCE_ATTRIBUTE]: azureResourceUri },\n        };\n      }\n\n      for (const [key, value] of Object.entries(\n        AZURE_FUNCTIONS_ATTRIBUTE_ENV_VARS\n      )) {\n        const envVar = process.env[value];\n        if (envVar) {\n          attributes = { ...attributes, ...{ [key]: envVar } };\n        }\n      }\n    }\n    return new Resource(attributes);\n  }\n}\n\nexport const azureFunctionsDetector = new AzureFunctionsDetector();\n"]}