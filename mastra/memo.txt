既存の情報を整理して、MastraでのカスタムAPIルートの使用方法について説明します。

## MastraでのカスタムAPIルートの使用方法

Mastraでは`registerApiRoute`関数を使用して、カスタムAPIエンドポイントを定義・登録できます。これにより、独自のHTTPエンドポイントを作成し、エージェントやワークフローと連携させることが可能です。

### 基本的な使用方法

```typescript
import { Mastra } from "@mastra/core";
import { registerApiRoute } from "@mastra/core/server";
import { salesSuccessCaseAgent } from "./agents/salesSuccessCaseAgent";

export const mastra = new Mastra({
  agents: { salesSuccessCaseAgent },
  server: {
    apiRoutes: [
      registerApiRoute('/my-custom-route', {
        method: 'GET',  // HTTPメソッド: GET, POST, PUT, DELETEなど
        handler: async (c) => {
          // リクエスト処理ロジック
          const agent = mastra.getAgent('salesSuccessCaseAgent');
          const result = await agent.generate("質問内容");
          return c.json({ response: result.text });
        }
      }),
    ]
  }
});
```

### パラメータ解説

`registerApiRoute`関数は以下のパラメータを受け取ります：

1. **path** (必須): APIエンドポイントのパス（例: `/my-api`）
   - `/api/`で始まるパスは使用できない（Mastraの内部APIと衝突するため）

2. **options** (必須): APIルートのオプション
   - **method**: HTTPメソッド（'GET', 'POST', 'PUT', 'DELETE'など）
   - **handler**: リクエスト処理関数。以下の機能があります：
     - `c.req.json()`: リクエストボディをJSON形式で取得
     - `c.json()`: JSONレスポンスを返す
     - `c.text()`: テキストレスポンスを返す
     - `mastra`インスタンスにアクセス可能
   - **middleware**: オプションのミドルウェア関数（認証など）
   - **openapi**: OpenAPI仕様のためのオプション設定

### 実装例

#### GETリクエストの処理

```typescript
registerApiRoute('/api/status', {
  method: 'GET',
  handler: async (c) => {
    return c.json({ status: "online", version: "1.0.0" });
  }
})
```

#### POSTリクエストとエージェント連携

```typescript
registerApiRoute('/chat', {
  method: 'POST',
  handler: async (c) => {
    const { message, userId } = await c.req.json();
    const agent = mastra.getAgent('salesSuccessCaseAgent');

    const response = await agent.stream(message, {
      resourceId: userId,
      threadId: `thread-${userId}`,
    });

    return response.toDataStreamResponse();
  }
})
```

#### パラメータの取得

```typescript
registerApiRoute('/users/:userId', {
  method: 'GET',
  handler: async (c) => {
    const userId = c.req.param('userId');
    // ユーザーIDに基づく処理
    return c.json({ userId });
  }
})
```

### 注意点

1. `/api/`で始まるパスは使用できません（Mastraの内部APIと衝突）
2. APIルートは`mastra dev`コマンドで起動されるサーバーで自動的に有効になります
3. カスタムAPIルートはMastraインスタンスと完全に統合され、エージェントやワークフローに直接アクセスできます

サーバーの起動は`pnpm run dev`または`npm run dev`コマンドで行い、デフォルトでは`http://localhost:4111`でアクセスできます。

コードの例にある通り、カスタムAPIルートを通じてエージェントを呼び出したり、ワークフローを開始したりすることができます。
